# WebRTC Call Signaling Server - HTTPS Only Configuration
# Dedicated nginx configuration for audio/video call signaling
# Forces HTTPS redirects and provides secure WebSocket proxying

# Redirect all HTTP traffic to HTTPS
server {
    listen 80;
    server_name docavailable.org;
    
    # Security headers for HTTP redirects
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    
    # Redirect all HTTP requests to HTTPS
    return 301 https://$server_name$request_uri;
}

# Main HTTPS server block
server {
    listen 443 ssl http2;
    server_name docavailable.org;

    # SSL Configuration - Modern and Secure
    ssl_certificate /etc/letsencrypt/live/docavailable.org/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/docavailable.org/privkey.pem;
    
    # Modern SSL protocols and ciphers
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA;
    ssl_prefer_server_ciphers off;
    
    # SSL session optimization
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    
    # HSTS (HTTP Strict Transport Security)
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    
    # Security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy "strict-origin-when-cross-origin";
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; connect-src 'self' wss: https:; font-src 'self'; object-src 'none'; media-src 'self'; frame-src 'none';";
    
    # WebRTC Call Signaling (Port 8080 - Dedicated Call Server)
    location /call-signaling {
        proxy_pass http://localhost:8080/call-signaling;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # WebSocket specific settings
        proxy_read_timeout 86400;
        proxy_send_timeout 86400;
        proxy_connect_timeout 60;
        
        # Disable compression for WebSocket connections
        gzip off;
        proxy_set_header Accept-Encoding "";
        proxy_set_header Sec-WebSocket-Extensions "";
        
        # Buffer settings for real-time communication
        proxy_buffering off;
        proxy_cache off;
        proxy_request_buffering off;
        
        # WebSocket keep-alive
        proxy_set_header Connection "upgrade";
        proxy_set_header Upgrade $http_upgrade;
    }

    # WebRTC Chat Signaling (Port 8081 - Existing Chat Server)
    location /chat-signaling {
        proxy_pass http://localhost:8081/chat-signaling;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # WebSocket specific settings
        proxy_read_timeout 86400;
        proxy_send_timeout 86400;
        proxy_connect_timeout 60;
        
        # Disable compression for WebSocket connections
        gzip off;
        proxy_set_header Accept-Encoding "";
        proxy_set_header Sec-WebSocket-Extensions "";
        
        # Buffer settings for real-time communication
        proxy_buffering off;
        proxy_cache off;
        proxy_request_buffering off;
    }

    # Health check endpoint for call server
    location /call-health {
        proxy_pass http://localhost:8080/health;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Cache health check for 10 seconds
        proxy_cache_valid 200 10s;
        add_header X-Cache-Status $upstream_cache_status;
    }

    # Health check endpoint for chat server
    location /chat-health {
        proxy_pass http://localhost:8081/health;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Cache health check for 10 seconds
        proxy_cache_valid 200 10s;
        add_header X-Cache-Status $upstream_cache_status;
    }

    # Combined health check endpoint
    location /webrtc-health {
        proxy_pass http://localhost:8080/health;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Cache health check for 10 seconds
        proxy_cache_valid 200 10s;
        add_header X-Cache-Status $upstream_cache_status;
    }

    # Root endpoint - Service information
    location / {
        return 200 'DocAvailable WebRTC Services - HTTPS Only\n\nCall Signaling: wss://docavailable.org/call-signaling\nChat Signaling: wss://docavailable.org/chat-signaling\n\nHealth Checks:\n- Call Server: https://docavailable.org/call-health\n- Chat Server: https://docavailable.org/chat-health\n- Combined: https://docavailable.org/webrtc-health\n\nSecurity: HTTPS Only - All HTTP traffic redirected to HTTPS';
        add_header Content-Type text/plain;
    }

    # Block access to sensitive files
    location ~ /\. {
        deny all;
        return 404;
    }
    
    location ~ \.(env|log|conf)$ {
        deny all;
        return 404;
    }
}

# Additional security server block for non-matching hostnames
server {
    listen 443 ssl http2 default_server;
    server_name _;
    
    # Use the same SSL configuration
    ssl_certificate /etc/letsencrypt/live/docavailable.org/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/docavailable.org/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    
    # Return 444 (close connection) for all requests
    return 444;
}
